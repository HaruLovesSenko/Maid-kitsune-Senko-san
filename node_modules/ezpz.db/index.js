const mongoose = require('mongoose');
const s = new mongoose.Schema({id: String, data: mongoose.Mixed })
const Data = mongoose.model('ezpzdb', s)

/*-------------------------------EXPORTS-------------------------------*/
  module.exports = {
    connect: (db, obj) => {
      mongoose.connect(db, obj)
    },
    set: (set, toSet) => {
      if (typeof(set) != 'string') throw new TypeError("The document you want to change must be in a string!");
      Data.findOne({id: set}, (err, data) => {
        if (err) return console.error(err)
        if (!data) {
          try {
            new Data({id: set, data: toSet}).save((e, doc) => {
              if (e) return console.error(e)
            })
          } catch(e) {
            console.error(e)
          }
        } else {
          try {
            data.data = toSet
            data.save((e, doc) => {
              if (e) return console.error(e)
            })
          } catch(e) {
            console.error(e)
          }
        }
      })
    },
    get: (toGet) => {
      if (typeof(toGet) != 'string') throw new TypeError("The document you want to get must be in a string!");
      return new Promise((res) => {
        Data.findOne({id: toGet}, (err, data) => {
          if (err) return console.error(err);
          try {
            res(data.data);
          } catch {
            res(false);
          }
        })
      })
    },
    all: () => {
      return new Promise((res) => {
        Data.find({}, (err, data) => {
          if (err) return console.error(err);
          let o = {}
          let arr = []
          data.forEach(d => {
            o.id = d.id;
            o.data = d.data;
            arr.push(o);
            o = {};
            return;
          })
          res(arr);
        })
      })
    },
    delete: (toDelete) => {
      if (typeof(toDelete) != 'string') throw new TypeError("The document you want to delete must be in a string!");
      Data.deleteOne({id: toDelete})
        .catch(e => console.error(e))
    }
  };